spring:
  jpa:
    hibernate:
      ddl-auto: update
  datasource:
    url: jdbc:mysql://localhost:3307/keycloak
    username: keycloakdb
    password: keycloak

logging:
  level:
    com.example: debug

server:
  port: 8081

camunda:
  bpm:
    authorization:
      enabled: true
#      tenant-check-enabled: false
#      enabled-for-custom-code: true
    filter:
      create: All tasks
    history-level: full
    deployment-resource-pattern: classpath*:**/processes/*.bpmn

# Externalized Keycloak configuration
keycloak:
  # Keycloak access for the Identity Provider plugin.
  url:
    # the authorisation server as HTTPS or HTTP
#    plugin: ${KEYCLOAK_URL_PLUGIN:https://localhost:8084}
    plugin: ${KEYCLOAK_URL_PLUGIN:http://localhost:8083}
    # SSO Authentication requests to authorisation server as HTTP. Send by application as redirect to the browser
    auth: ${KEYCLOAK_URL_AUTH:http://localhost:8083}
    # SSO Token requests to authorisation server as HTTP. Send from the application to Keycloak
    token: ${KEYCLOAK_URL_TOKEN:http://localhost:8083}

  # Keycloak Camunda Identity Client
  client:
    id: ${KEYCLOAK_CLIENT_ID:camunda-identity-service}
    secret: ${KEYCLOAK_CLIENT_SECRET:j6CjMTNhlVNFhhvuUvP4wEGgTlNjW07G}

# Spring Boot Security OAuth2 SSO
spring.security.oauth2:
  client:
    registration:
      keycloak:
        provider: keycloak
        client-id: ${keycloak.client.id}
        client-secret: ${keycloak.client.secret}
        authorization-grant-type: authorization_code
        redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
        scope: openid, profile, email
    provider:
      keycloak:
        issuer-uri: ${keycloak.url.auth}/auth/realms/Spring_demo
        authorization-uri: ${keycloak.url.auth}/auth/realms/Spring_demo/protocol/openid-connect/auth
        user-info-uri: ${keycloak.url.auth}/auth/realms/Spring_demo/protocol/openid-connect/userinfo
        token-uri: ${keycloak.url.token}/auth/realms/Spring_demo/protocol/openid-connect/token
        jwk-set-uri: ${keycloak.url.token}/auth/realms/Spring_demo/protocol/openid-connect/certs
        # set user-name-attribute one of:
        # - sub                -> default; using keycloak ID as camunda user ID
        # - email              -> useEmailAsCamundaUserId=true
        # - preferred_username -> useUsernameAsCamundaUserId=true
        user-name-attribute: preferred_username

# Camunda Rest API
rest.security:
  enabled: true
  provider: keycloak
  required-audience: camunda-rest-api

# Camunda Keycloak Identity Provider Plugin
plugin:
  identity:
    keycloak:
      keycloakIssuerUrl: ${keycloak.url.plugin}/auth/realms/Spring_demo
      keycloakAdminUrl: ${keycloak.url.plugin}/auth/admin/realms/Spring_demo
      clientId: ${keycloak.client.id}
      clientSecret: ${keycloak.client.secret}
      useUsernameAsCamundaUserId: true
      useGroupPathAsCamundaGroupId: true
      administratorGroupName: camunda-admin
      disableSSLCertificateValidation: true